"""sumary_line

Keyword arguments:
argument -- description
Return: return_description
"""

import subprocess
from flask import Blueprint, render_template, jsonify, request
import platform
import os
import json

# Create the blueprint for the vulnerability scanner
vulnerability_scanner_bp = Blueprint('Vulnerability Scanner', __name__)

@vulnerability_scanner_bp.route('/vulnerability_scanner')
def vulnerability_scanner():
    """Renders the vulnerability scanner HTML page."""
    return render_template('vulnerability_scanner.html')

@vulnerability_scanner_bp.route('/get_firewall_rules', methods=['POST'])
def get_firewall_rules():
    """Fetches firewall rules from the system and identifies vulnerabilities."""
    operating_system = platform.system()
    try:    
        # Select command based on OS
        if operating_system == 'Linux':
            cmd = ["iptables", "-L", "--line-numbers", "-n"]
        elif operating_system == 'Windows':
            cmd = ["netsh", "advfirewall", "firewall", "show", "rule", "name=all"]
        elif operating_system == 'Darwin':
            cmd = ["pfctl", "-sr"]
        else:
            # Return error for unsupported OS
            return jsonify({'error': "Unsupported OS", 'rules': [], 'vulnerable_rules': {}})
        # Run the firewall command and capture output
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        output = result.stdout
        rules = []
        current_rule = {}
        # Parse the command output into rule dictionaries
        for line in output.splitlines():
            line = line.strip()
            # Detect start of a new rule (Windows heuristic)
            if line.startswith("Rule Name:"):
                if current_rule:
                    rules.append(current_rule)
                current_rule = {}
            if ":" in line:
                key, value = line.split(":", 1)
                current_rule[key.strip()] = value.strip()
        if current_rule:
            rules.append(current_rule)
        # Analyze rules for vulnerabilities
        vulnerable_rules = analyze_rules(rules)
        # Return all rules and vulnerable rules as JSON
        return jsonify({'error': None, 'rules': rules, 'vulnerable_rules': vulnerable_rules})
    except Exception as e:
        # Return error if command fails
        return jsonify({'error': str(e), 'rules': [], 'vulnerable_rules': {}})

def analyze_rules(rules):
    """Identifies vulnerable firewall rules (inbound allow rules)."""
    vulnerable_rules = {}
    for i, rule in enumerate(rules):
        direction = rule.get("Direction", "").lower()
        action = rule.get("Action", "").lower()
        # Check if the rule allows inbound traffic
        if direction == "in" and action == "allow":
            rule_name = rule.get("Rule Name", f"Unnamed Rule {i}")
            vulnerable_rules[rule_name] = rule
    return vulnerable_rules
